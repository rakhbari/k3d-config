# k3d configuration file, saved as e.g. ./cluster-config.yaml
apiVersion: k3d.io/v1alpha4 # this will change in the future as we make everything more stable
kind: Simple # internally, we also have a Cluster config, which is not yet available externally
metadata:
  name: akc # name that you want to give to your cluster (will still be prefixed with `k3d-`)
servers: 1 # same as `--servers 1`
agents: 3 # same as `--agents 2`
image: rancher/k3s:v1.25.4-k3s1 # same as `--image rancher/k3s:v1.20.4-k3s1`
hostAliases: # /etc/hosts style entries to be injected into /etc/hosts in the node containers and in the NodeHosts section in CoreDNS
  - ip: 1.1.1.1
    hostnames:
      - cloud.flare.dns
ports:
  - port: 9090:80 # same as `--port '9090:80@loadbalancer'`
    nodeFilters:
      - loadbalancer
options:
  k3d: # k3d runtime settings
    wait: true # wait for cluster to be usable before returining; same as `--wait` (default: true)
    timeout: "60s" # wait timeout before aborting; same as `--timeout 60s`
    disableLoadbalancer: false # same as `--no-lb`
    disableImageVolume: false # same as `--no-image-volume`
    disableRollback: false # same as `--no-Rollback`
  k3s: # options passed on to K3s itself
    extraArgs: # additional arguments passed to the `k3s server|agent` command; same as `--k3s-arg`
      - arg: --disable=traefik
        nodeFilters:
          - server:*
      - arg: --kube-apiserver-arg=default-not-ready-toleration-seconds=30
        nodeFilters:
          - server:*
      - arg: --kube-apiserver-arg=default-unreachable-toleration-seconds=30
        nodeFilters:
          - server:*
      - arg: --kube-controller-arg=node-monitor-period=20s
        nodeFilters:
          - server:*
      - arg: --kube-controller-arg=node-monitor-grace-period=20s
        nodeFilters:
          - server:*
      - arg: --kubelet-arg=node-status-update-frequency=5s
        nodeFilters:
          - server:*
      - arg: --kubelet-arg=node-status-update-frequency=5s
        nodeFilters:
          - agent:*
  kubeconfig:
    updateDefaultKubeconfig: true # add new cluster to your default Kubeconfig; same as `--kubeconfig-update-default` (default: true)
    switchCurrentContext: true # also set current-context to the new cluster's context; same as `--kubeconfig-switch-context` (default: true)
